<script>
  import { onMount } from 'svelte';

  import ProjectSelector from './components/ProjectSelector.svelte';
  import TemplateSelector from './components/TemplateSelector.svelte';
  import ButtonElement from './components/ButtonElement.svelte';
  import NoteList from './components/NoteList.svelte';
  
  export let fig;

  let currentProject = 'Not Set';
  let currentProjectDir = 'Not Set';
  let projects = [];
  let showDialog = false;
  let runCleanUp = null;
  let expert = false;
  let darkmode = false;
  let maidfile = false;
  let npmfile = false;
  let maskfile = false;
  let gruntfile = false;
  let gulpfile = false;
  let gitfile = false;
  let tasks = null;
  let gitmessage = '';
  let templates = [];
  let templateDirUrl = '';
  let local = true;
  let runScript = 'setupTemplate';
  let templateName = '';
  let showNewTemplate = false;
  let useTemplate = 'None';
  let showEditTemplate = false;
  let PMFile = '~/.projectFiles/projectmanager.json';
  let showNotes = false;
  let tempLists;
  let showConfirm = false;
  let confirmFunction = null;
  let styles = {
    DMbkgrdcolor: '#282B35',
    bkgrdcolor: 'white',
    DMhvbkgrdcolor: '#80FFEA',
    hvbkgrdcolor: 'cyan',
    DMcolor: '#F7F7F1',
    color: 'black'
  }
  
  function close() {
    fig.reposition("7");
  }
  
  onMount(() => {
    //
    // Get the project manager application information.
    //
    fig.fread(PMFile, (data, err) => {
      if(err) {
        //
        // Files doesn't exist. Set the defaults and save the file.
        //
        expert = false;
        darkmode = false;
        styles = {
          DMbkgrdcolor: '#282B35',
          bkgrdcolor: 'white',
          DMcolor: '#F7F7F1',
          DMhvbkgrdcolor: '#80FFEA',
          hvbkgrdcolor: 'cyan',
          color: 'black'
        }
        templates = [];
        saveAppData();
      } else {
        //
        // Parse the information. Fix any data that wasn't
        // present in earilier versions.
        //
        var appData = JSON.parse(data);
        if(typeof appData.expert !== 'undefined') expert = appData.expert;
        if(typeof appData.darkmode !== 'undefined') darkmode = appData.darkmode;
        if(typeof appData.templates !== 'undefined') templates = appData.templates;
        if(typeof appData.styles !== 'undefined') styles = appData.styles;
        if(typeof styles.DMhvbkgrdcolor === 'undefined') {
          styles.DMhvbkgrdcolor = '#80FFEA';
          styles.hvbkgrdcolor = 'cyan';
        }

        var body = document.getElementsByTagName('body')[0];
        if(darkmode) {
          body.style.color = styles.DMcolor;
          body.style.backgroundColor = styles.DMbkgrdcolor;
        } else {
          body.style.color = styles.color;
          body.style.backgroundColor = styles.bkgrdcolor;
        }
      }
    });

    //
    // Get the list of projects.
    //
    fig.fread('~/.projects', (data, err) => {
      if(err) {
        console.log("Error:  " + err);
        projects = '';
        currentProject = '';
      } else {
        projects = data.split('\n');
        var nodata = false;
        projects.forEach((line, index, arr) => {
          if(line !== '') {
            arr[index] = line.split('|');
          } else {
            nodata = true;
          }
        });
        //
        // This gets rid of an empty line at the end of the file.
        //
        if(nodata) projects.pop();
      }

      //
      // Now, get the current project directory and set the project.
      //
      fig.fread('~/.currentprojectdir', (data, err) => {
        if(err) {
          console.log("Error:  " + err);
        } else {
          setProjectByDirectory(data);
        }
      })
    })
  });

  function setProjectByName(name) {
    currentProject = null;
    currentProjectDir = null;
    if(typeof name !== 'string') name = new String(name);
    projects.forEach((row) => {
      if(row !== '') {
        if(name.includes(row[0])) {
          currentProjectDir = row[1];
          currentProject = row[0];
        }
      }
    });
    initProjects();
  }

  function setProjectByDirectory(dir) {
    currentProjectDir = null;
    currentProject = null;
    projects.forEach((row) => {
      if(row !== '') {
        if(isChildOf(dir,row[1])) {
          currentProject = row[0];
          currentProjectDir = row[1];
        }
      }
    });
    initProjects();
  }

  function runEditor(file, lastCommand = null) {
    //
    // Now, see if they have the My Editor workflow or the BitBar, TextBar, or ScriptBar
    // equivalent.
    //
    fig.fread('~/.myeditorchoice', (data, err) => {
      if(err) {
        //
        // They don't have the file. Use the environment editor.
        //
        fig.execute(fig.env.EDITOR + " '" + file + "'", (out, err) => {
          if(lastCommand !== null) fig.execute(lastCommand, (data,err) => {});
        });
      } else {
        //
        // They are using it. Use what it has instead. It's not a command line, so run 
        // it in the macOS way.
        //
        var editor = data.trim();
        if(data[0] === '/') {
          fig.execute("open -a '" + editor + "' '" + file + "'", (out, err) => {
            if(lastCommand !== null) fig.execute(lastCommand, (data,err)=>{});
          });
        } else {
          fig.execute(editor + " '" + file + "'", (out, err) => {
            if(lastCommand !== null) fig.execute(lastCommand, (data,err) => {});
          });
        }
      }
    });
  }

  function initProjects() {
    //
    // Make sure the project is setup right.
    //
    if((currentProjectDir !== null)||(currentProjectDir !== '')) {
      //
      // Okay, a valid project is selected. Setup the internal variables.
      //
      tasks = new Array();
      fig.fread(currentProjectDir + '/maidfile.md',(data, err) => {
        if(err) {
          maidfile = false;
        } else {
          maidfile = true;
          var commands = data.split('\n').filter(item => item.match(/^##\s*\w*/) !== null);
          commands.forEach(item => {
            const match = item.match(/^##\s*(\w*)/);
            tasks.push({
              name: "Maid " + match[1] + " script",
              command: "maid " + match[1]
            });
            tasks = tasks;
          });
        }
        fig.fread(currentProjectDir + '/maskfile.md',(data, err) => {
          if(err) {
            maskfile = false;
          } else {
            maskfile = true;
            var commands = data.split('\n').filter(item => item.match(/^##\s*\w*/) !== null);
            commands.forEach(item => {
              const match = item.match(/^##\s*(\w*)/);
              tasks.push({
                name: "Mask " + match[1] + " script",
                command: "mask " + match[1]
              });
              tasks = tasks;
            });
          }
          fig.fread(currentProjectDir + '/package.json',(data, err) => {
            if(err) {
              npmfile = false;
            } else {
              npmfile = true;
              var jpack = JSON.parse(data);
              for(const item in jpack.scripts) {
                tasks.push({
                  name: "NPM " + item + " script",
                  command: "npm run " + item
                });
                tasks = tasks;
              }
            }
            fig.fread(currentProjectDir + '/Gruntfile.js',(data, err) => {
              if(err) {
                gruntfile = false;
              } else {
                gruntfile = true;
                var commands = data.split('\n').filter(item => item.match(/grunt\.registerTask\(/) !== null);
                commands.forEach(item => {
                  const match = item.match(/grunt\.registerTask\(\'([^\']*)\'/);
                  if(match === null) {
                    match = item.match(/grunt\.registerTask\(\"([^\']*)\"/);
                  }
                  tasks.push({
                    name: "Grunt " + match[1] + " script",
                    command: "grunt " + match[1]
                  });
                  tasks = tasks;
                });
              }
              fig.fread(currentProjectDir + '/gulpfile.js',(data, err) => {
                if(err) {
                  gulpfile = false;
                } else {
                  gulpfile = true;
                  var commands = data.split('\n').filter(item => item.match(/^exports\.[^\=]+\=/) !== null);
                  commands.forEach(item => {
                    const match = item.match(/^exports\.([^(\ |\=)]*)/);
                    tasks.push({
                      name: "Gulp " + match[1] + " script",
                      command: "gulp " + match[1]
                    });
                    tasks = tasks;
                  });
                }
              });
            });
          });
        });
      });

      //
      // See if it has a git repository and setup.
      //
      fig.fread(currentProjectDir + '/.git/HEAD',(data,err) => {
        if(!err) {
          //
          // It's a git repository. Set up the functions for it.
          //
          gitfile = true;
          gitmessage = '';
        }
      });
    }
  }

  function gotoProjDir() {
    fig.run("cd '" + currentProjectDir + "'");
    SaveCurrentProject();
  }

  function setCurrentDirectory() {
    getCurrentDirectory(dir => {
      setProjectByDirectory(dir);
      if(currentProject === null) {
        //
        // It's a new Project directory. Get a name.
        //
        currentProject = 'New';
        currentProjectDir = dir;
        showDialog = true;
        runCleanUp = FinishNewProject;
      }
    });
  }
  
  function SaveCurrentProject() {
    //
    // Save the current project directory for other applications.
    //
    fig.fwrite('~/.currentprojectdir',currentProjectDir, (err) => {
      if(err) console.log(err);
    });
  }

  function FinishNewProject() {
    //
    // Save as a new project.
    //
    var narr = [];
    narr[0] = currentProject;
    narr[1] = currentProjectDir;
    projects.push(narr);
    projects = projects;
    saveProjects();

    //
    // Create the startup script as a blank executable file.
    //
    fig.execute('touch "' + currentProjectDir + '/.startproject"; chmod a+x "' + currentProjectDir + '/.startproject";', (out, err) => {});

    //
    // Setup the project buttons.
    //
    initProjects();
    
    //
    // If using template, then copy it into place.
    //
    if(!useTemplate.includes('None')) {
      console.log(useTemplate);
      var template = templates.find(item => item.name.includes(useTemplate));
      if(template.local) {
        //
        // It's a local directoy. Copy away.
        //
        fig.run('echo "Copy template' + useTemplate + '..."; cp -R "' + template.templateDirUrl + '/." .; ' + template.runScript + ';');
        fig.fread(template.templateDirUrl + "/setupTemplate",(data,err) => {
          //
          // The setup script for the template is there. remove it.
          //
          if(!err) fig.run("rm setupTemplate;");
        });
      } else {
        //
        // It's a repository on GitHub.
        //
        fig.run('echo "Copy GitHub template ' + useTemplate + '..."; npx degit --force ' + template.templateDirUrl + ' "' + currentProjectDir + '"; ' + template.runScript + ';');
      }
    }
  }

  function removeTemplate() {
    templates = templates.filter(item => !item.name.includes(useTemplate));
    useTemplate = 'None';
    templateName = '';
    templateDirUrl = '';
    runScript = 'setupTemplate';
    local = true;
    saveAppData();
  }

  function newBlankTemplate() {
    useTemplate = 'None';
    templateName = 'New Template';
    templateDirUrl = '';
    runScript = 'setupTemplate';
    local = true;
  }

  function saveProjects() {
    //
    // Create the file in a string.
    //
    var saveString = projects.map((item) => {
      return item[0] + '|' + item[1];
    }).join('\n');

    //
    // Write to the file.
    //
    fig.fwrite('~/.projects',saveString,(err) => {
      if(err) console.log(err);
    });
  }

  function getCurrentDirectory(fun) {
    var pth = fig.env.PWD;
    fig.fread('~/.path', (data, err) => {
      if (err) {
        pth = fig.env.PWD;
      } else {
        pth = data.trim();
      }
      console.log(pth);
      fun(pth);
    });
  }

  function RunProjectScript() {
    fig.run('pushd .; cd "' + currentProjectDir + '"; ./.startproject "' + currentProjectDir + '"; popd;');
  }
  
  function EditProjectScript() {
    var psf = currentProjectDir + "/.startproject";
    fig.execute('/bin/chmod a-x "' + psf + '"',(data,err) => {
      runEditor((psf), '/bin/chmod a+x "' + psf + '"');
    });
  }

  function isChildOf(child, parent) {
    child = new String(child);
    parent = new String(parent);
    if (child === parent) return true;
    const parentTokens = parent.split('/').filter(i => i.length);
    const childTokens = child.split('/').filter(i => i.length);
    return parentTokens.every((t, i) => childTokens[i] === t);
  }

  function OpenProjectInEditor() {
    runEditor(currentProjectDir);
  }

  function editMaskFile() {
    runEditor(currentProjectDir + '/maskfile.md');
  }
  
  function editMaidFile() {
    runEditor(currentProjectDir + '/maidfile.md');
  }
  
  function editNPMFile() {
    runEditor(currentProjectDir + '/package.json');
  }
  
  function editGruntFile() {
    runEditor(currentProjectDir + '/Gruntfile.js');
  }
 
  function editGulpFile() {
    runEditor(currentProjectDir + '/gulpfile.js');
  }

  function runTask(tsk) {
    fig.run("pushd .; cd '" + currentProjectDir + "'; " + tsk.command + "; popd;");
  }

  function toggleExpertSave() {
    expert = !expert;
    saveAppData();
  }

  function toggleDarkModeSave() {
    darkmode = !darkmode;
    var body = document.getElementsByTagName('body')[0];
    if(darkmode) {
      body.style.color = styles.DMcolor;
      body.style.backgroundColor = styles.DMbkgrdcolor;
    } else {
      body.style.color = styles.color;
      body.style.backgroundColor = styles.bkgrdcolor;
    }
    saveAppData();
  }

  function saveAppData() {
    fig.fwrite(PMFile, 
               JSON.stringify({ expert: expert, darkmode: darkmode, styles: styles, templates: templates}), (err) => {});
  }

  function gitStatus() {
    fig.run("pushd .; cd '" + currentProjectDir + "'; git status; popd;");
  }

  function gitCommitPush() {
    fig.run("pushd .; cd '" + currentProjectDir + "'; git commit -am '" + gitmessage + "'; git push; popd;");
    gitmessage = '';
  }

  function addTemplate() {
    //
    // The templates structure is:
    //
    //  templates = {
    //    templateName,
    //    templateDirUrl,
    //    local,
    //    runScript
    //  }
    //
    // where templateDirUrl is the path to a local directory or a URL of a GitHub account 
    // to copy for the template, local is true if the template is local or false if it is 
    // on the web, and runScript contains the commands to run in the freshly copied directory 
    // to initialize the project or do what ever is needed to get the template ready for use.
    //
    if((typeof templateName === 'string') &&
       (typeof templateDirUrl === 'string') &&
       (templateDirUrl !== '') &&
       (typeof local === 'boolean') &&
       (typeof runScript === 'string')) {
      if(typeof templates !== 'object') templates = [];
      var newTemp = {
        name: templateName,
        templateDirUrl: templateDirUrl,
        local: local,
        runScript: runScript
      };
      var test = templates.find(item => item.name.includes(templateName));
      if(typeof test === 'undefined') {
        templates.push(newTemp);
      } else {
        templates = templates.map(item => {
          if(item.name.includes(templateName)) {
            item = newTemp;
          }
          return item;
        });
      }
      templates = templates;
      saveAppData();
    }
  }

  function setDirAsTemplate() {
    if(showNewTemplate) {
      //
      // Inside of the create template dialog. Create it.
      //
      addTemplate();
    } else {
      //
      // Turn on the template dialog so the user can fill it in.
      //
      getCurrentDirectory((dir) => {
        console.log(dir);
        var dirName = dir.split('\/');
        templateName = dirName[dirName.length-1];
        templateDirUrl = dir;
        local = true;
        showNewTemplate = true;
      });
    }
  }

  function editTemplates() {
    showEditTemplate = true;
    useTemplate = 'None';
    templateName = '';
    templateDirUrl = '';
    runScript = 'setupTemplate';
    local = true;
  }

  function setTemplateToEdit() {
    var template = templates.find(item => item.name.includes(useTemplate));
    templateName = template.name;
    templateDirUrl = template.templateDirUrl;
    local = template.local;
    runScript = template.runScript;
  }

  function saveTemplate() {
    var found = false;
    templates = templates.map(item => {
      if(item.name.includes(useTemplate)) {
        item.name = templateName;
        item.templateDirUrl = templateDirUrl;
        item.local = local;
        item.runScript = runScript;
        found = true;
      }
      return item;
    });
    if(!found) {
      templates.push({
        name: templateName,
        templateDirUrl: templateDirUrl,
        local: local,
        runScript: runScript
      });
    }
    templates = templates;
    saveAppData();
  }

  function deleteProject() {
    projects = projects.filter(item => !item[0].includes(currentProject));
    currentProject = '';
    currentProjectDir = '';
    tasks = [];
    saveAppData();
  }
</script>

<div style="display: flex; flex-direction: column; background-color: {darkmode ? styles.DMbkgrdcolor : styles.bkgrdcolor}; color: {darkmode ? styles.DMcolor : styles.color};">
<div style="display: flex; flex-direction: row;">
<label for='expert'>Expert</label>
<input id='expert' name='expert' type='checkbox' checked={expert} on:change={toggleExpertSave} style="margin: 3px 0px 0px 10px;" />
<label for='darkMode' style="margin: 0px 0px 0px 10px;">Dark Mode</label>
<input id='darkMode' name='darkMode' type='checkbox' checked={darkmode} on:change={toggleDarkModeSave} style="margin: 3px 0px 0px 10px;" />
</div>

{#if !showConfirm && !showDialog && !showNewTemplate && !showEditTemplate && !showNotes }

{#if !expert}
Welcome to the Project Manager for Fig. Here, you can go to your projects, run scripts, and much more.

The `Expert` checkbox above will hide these information areas and just show the actions you can perform.

{/if}

### Current Project: <ProjectSelector project={currentProject} projects={projects} on:projectChange={(e) => { setProjectByName(e.detail); }} darkmode={darkmode} styles={styles} /> 

<ButtonElement show={!expert} buttonFunction={gotoProjDir} buttonName="Go to Project" styles={styles} darkmode={darkmode}>

#### Goto Project Directory

This will take the current terminal session to the project directory in the dropdown.

</ButtonElement>

{#if !expert}

#### Scripts

The following buttons will launch scripts that are in `npm`, `gulp`, `grunt`, `maid`, or `mask` files. You don't have to be in the 
root directory of the project to run them. Project Manager will save your current directory, run the 
script in the root directory of the project, and return to your directory.

{/if}

{#if tasks !== null}
  {#each tasks as task}
    <button style="background-color: {darkmode ? styles.DMbkgrdcolor : styles.bkgrdcolor}; color: {darkmode ? styles.DMcolor : styles.color};" on:click={() => { runTask(task); }}>{task.name}</button>
  {/each}
{/if}

<ButtonElement show={!expert} buttonFunction={OpenProjectInEditor} buttonName="Edit Project"  styles={styles} darkmode={darkmode} >

#### Edit the Project

This will open the project in the editor defined in the `$EDITOR` environment variable or the 
editor listed in the `~/.myeditorchoice` file, which is used by the My Editor workflow for Alfred or the CurrentFiles script used with [BitBar](http://getbitbar.org), 
[TextBar](http://richsomerfield.com/apps/textbar/), and ScriptBar (my own version that isn't available yet).

</ButtonElement>

<ButtonElement show={!expert} buttonFunction={() => { showNotes = true; }} buttonName="Project Notes" styles={styles} darkmode={darkmode}>

#### Project Notes

This button will show all the notes files associated with the current project. These are the 
same notes used in the [fman Notes plugin](https://github.com/raguay/Notes). Here, you will be able to create a new note, edit 
a note, or delete a note. All project notes are in the `.notes` directory for the current 
project.

</ButtonElement>

{#if maidfile}
<ButtonElement show={!expert} buttonFunction={editMaidFile} buttonName="Edit Maid File" styles={styles} darkmode={darkmode}>

#### Edit the Maid File

Maid is a task runner written in JavaScript for defining actions using a markdown file.

</ButtonElement>
{/if}

{#if gulpfile}
<ButtonElement show={!expert} buttonFunction={editGulpFile} buttonName="Edit Gulp File" styles={styles} darkmode={darkmode}>

#### Edit the Gulp File

Gulp is a task runner written in JavaScript for defining actions using a javascript file.

</ButtonElement>
{/if}

{#if gruntfile}
<ButtonElement show={!expert} buttonFunction={editGruntFile} buttonName="Edit Grunt File" styles={styles} darkmode={darkmode}>

#### Edit the Grunt File

Grunt is a task runner written in JavaScript for defining actions using a javascript file.

</ButtonElement>
{/if}

{#if maskfile}
<ButtonElement show={!expert} buttonFunction={editMaskFile} buttonName="Edit Mask File" styles={styles} darkmode={darkmode}>

#### Edit the Mask File

Mask is a task runner written in Rust for defining actions using a markdown file.

</ButtonElement>
{/if}

{#if npmfile}
<ButtonElement show={!expert} buttonFunction={editNPMFile} buttonName="Edit Npm File"  styles={styles} darkmode={darkmode}>

#### Edit the npm File

This will edit the `package.json` file for the npm project.

</ButtonElement>
{/if}

<ButtonElement show={!expert} buttonFunction={setCurrentDirectory} buttonName="Set Current Directory as Project" styles={styles} darkmode={darkmode}>

#### Set as Current Project or Create New Project Directory

This will get the current directory and set it as the current project. If the current directory 
is a subdirectory in a currently defined project, it will set that project as the active project. 

Otherwise, it will ask for a new project name, create a blank project start script, and save the current directory with that project name. 

You can also set a template to be used to create this project. If a local template have the script `setupTemplate` in the template directory, it will be removed 
after the script in the variable `Script` is ran. The script variable is automatically set to 
`setupTemplate` for convience when creating templates.

</ButtonElement>

<ButtonElement show={!expert} buttonFunction={setDirAsTemplate} buttonName="Set Current Directory as Templage" styles={styles} darkmode={darkmode}>

#### Set the Current Directory as a Template

This will set the current directory as a template. It will show the template maker dialog
for adding the different fields that make up a template specification. 

</ButtonElement>

<ButtonElement show={!expert} buttonFunction={RunProjectScript} buttonName="Run Project Script" styles={styles} darkmode={darkmode}>

#### Run the Project Script

This will run the current project's start script. This script is in the top of the project directory and is named `.startproject`.

</ButtonElement>

<ButtonElement show={!expert} buttonFunction={EditProjectScript} buttonName="Edit Project Script" styles={styles} darkmode={darkmode}>

#### Edit the Project Script

This will open the project start script in the editor defined in the `$EDITOR` environment variable or the 
editor listed in the `~/.myeditorchoice` file, which is used by the My Editor workflow for Alfred or the CurrentFiles script used with [BitBar](http://getbitbar.org), 
[TextBar](http://richsomerfield.com/apps/textbar/), and ScriptBar (my own version that isn't available yet).

</ButtonElement>

{#if gitfile}

<ButtonElement show={!expert} buttonFunction={gitStatus} buttonName="Git Status" styles={styles} darkmode={darkmode}>

#### Git Status

Get the git status of the current project. You don't have to be in the root directory of the 
project to run this command.

</ButtonElement>

<ButtonElement show={!expert} buttonFunction={gitCommitPush} buttonName="Git Commit and Push" styles={styles} darkmode={darkmode}>

#### Git Commit and Push

This will take the message below and commit the changes to the git repository. Once committed, 
it will push to GitHub. You don't have to be in the root directory of the project to run this command.

<div slot="extra" style="width: 100%; display: flex; flex-direction: column; background-color: {darkmode ? styles.DMbkgrdcolor : styles.bkgrdcolor}; color: {darkmode ? styles.DMcolor : styles.color};">

#### Git Commit Message:

  <input type="text" bind:value={gitmessage} style="background-color: {darkmode ? styles.DMbkgrdcolor : styles.bkgrdcolor}; color: {darkmode ? styles.DMcolor : styles.color};" />
</div>

</ButtonElement>

{/if}

<ButtonElement show={!expert} buttonFunction={() => {showConfirm = true; confirmFunction = deleteProject; }} buttonName="Delete Project" styles={styles} darkmode={darkmode}>

#### Delete Project

This button will delete the currently selected project. This will not remove the files form the file system. It will only delete the project information.

</ButtonElement>

<ButtonElement show={!expert} buttonFunction={editTemplates} buttonName="Edit Templates" styles={styles} darkmode={darkmode}>

#### Edit Template

This button will show the edit template dialog for edit the different templates, remove a 
template, or create a new blank template.

</ButtonElement>

<ButtonElement show={!expert} buttonFunction={close} buttonName="Close" styles={styles} darkmode={darkmode}>

#### Leave the Project Manager

Leave the Project Manager application for Fig.

</ButtonElement>
{:else if showEditTemplate}

### Edit Template

{#if !expert}

Here you can edit the different templates, remove a template, or create a new blank template. 
Each template has the following data structure:

| Field | Description |
| --- | ------ |
| Name | Your name for the template. It will use the templates directory name for starters. |
| Path | The path, whether a local directory or a GitHub url, to use as a template.|
| Local | If checked, is a local directory. Otherwise, it is a GitHub url. |
| Script | The script to run in the new directory after the template is copied. |

{/if}

#### Select Template:

<TemplateSelector 
  templates={templates} 
  template={useTemplate} 
  on:templateChange={(data) => { useTemplate = data.detail; if(useTemplate !== 'None') setTemplateToEdit(); }} 
  darkmode={darkmode} 
  styles={styles} 
/>

#### Template Items:

<div style="display: flex; flex-direction: row;">
<label for="templateName" style="margin: 7px 10px 0px 0px;">Name:</label>
<input name="templateName" type="text" bind:value={templateName} style="background-color: {darkmode ? styles.DMbkgrdcolor : styles.bkgrdcolor}; color: {darkmode ? styles.DMcolor : styles.color};" />
</div>
<div style="display: flex; flex-direction: row;">
<label for="templateDirUrl" style="margin: 7px 10px 0px 0px;">Path:</label>
<input name="templateDirUrl" type="text" bind:value={templateDirUrl} style="background-color: {darkmode ? styles.DMbkgrdcolor : styles.bkgrdcolor}; color: {darkmode ? styles.DMcolor : styles.color};" />
</div>
<div style="display: flex; flex-direction: row;">
<label for="localq" style="margin: 0px 10px 0px 0px;">Local:</label>
<input name="localq" style="margin: 2px 0px 0px 0px; background-color: {darkmode ? styles.DMbkgrdcolor : styles.bkgrdcolor}; color: {darkmode ? styles.DMcolor : styles.color};" type="checkbox" bind:checked={local} />
</div>
<div style="display: flex; flex-direction: row;">
<label for="templateScript" style="margin: 8px 10px 0px 0px;">Script:</label>
<input name="templateScript" type="text" bind:value={runScript} style="background-color: {darkmode ? styles.DMbkgrdcolor : styles.bkgrdcolor}; color: {darkmode ? styles.DMcolor : styles.color};" />
</div>

<div style="display: flex; flex-direction: row;">
<button style="margin: 5px; padding: 3px; background-color: {darkmode ? styles.DMbkgrdcolor : styles.bkgrdcolor}; color: {darkmode ? styles.DMcolor : styles.color};" on:click={() => { showEditTemplate = false;}} >Return</button>
<button style="margin: 5px; padding: 3px; background-color: {darkmode ? styles.DMbkgrdcolor : styles.bkgrdcolor}; color: {darkmode ? styles.DMcolor : styles.color};" on:click={removeTemplate}>Delete</button>
<button style="margin: 5px; padding: 3px; background-color: {darkmode ? styles.DMbkgrdcolor : styles.bkgrdcolor}; color: {darkmode ? styles.DMcolor : styles.color};" on:click={newBlankTemplate}>New</button>
<button style="margin: 5px; padding: 3px; background-color: {darkmode ? styles.DMbkgrdcolor : styles.bkgrdcolor}; color: {darkmode ? styles.DMcolor : styles.color};" on:click={saveTemplate} >Save Template</button>
</div>

{:else if showNewTemplate}

### Setup Current Directory as a Template

{#if !expert}

This will create a new template item in the structure for templates. The user 
can then use the information to create a new project from the template. It is a 
fairly flexable system in which you can designate a script or command line to 
execute after the template is copied.

| Field | Description |
| --- | ------ |
| Name | Your name for the template. It will use the templates directory name for starters. |
| Path | The path, whether a local directory or a GitHub url, to use as a template.|
| Local | If checked, is a local directory. Otherwise, it is a GitHub url. |
| Script | The script to run in the new directory after the template is copied. |

{/if}

<div style="display: flex; flex-direction: row;">
<label style="margin: 7px 10px 0px 0px;">Name:
<input type="text" bind:value={templateName} style="background-color: {darkmode ? styles.DMbkgrdcolor : styles.bkgrdcolor}; color: {darkmode ? styles.DMcolor : styles.color};" />
</label>
</div>
<div style="display: flex; flex-direction: row;">
<label style="margin: 7px 10px 0px 0px;">Path:
<input type="text" bind:value={templateDirUrl} style="background-color: {darkmode ? styles.DMbkgrdcolor : styles.bkgrdcolor}; color: {darkmode ? styles.DMcolor : styles.color};" />
</label>
</div>
<div style="display: flex; flex-direction: row;">
<label style="margin: 0px 10px 0px 0px;">Local:
<input type="checkbox" bind:checked={local} style="margin: 2px 0px 0px 0px; background-color: {darkmode ? styles.DMbkgrdcolor : styles.bkgrdcolor}; color: {darkmode ? styles.DMcolor : styles.color};" />
</label>
</div>
<div style="display: flex; flex-direction: row;">
<label style="margin: 8px 10px 0px 0px;">Script:
<input type="text" bind:value={runScript} style="background-color: {darkmode ? styles.DMbkgrdcolor : styles.bkgrdcolor}; color: {darkmode ? styles.DMcolor : styles.color};" />
</label>
</div>

<div style="display: flex; flex-direction: row;">
<button style="margin: 5px; padding: 3px; background-color: {darkmode ? styles.DMbkgrdcolor : styles.bkgrdcolor}; color: {darkmode ? styles.DMcolor : styles.color};" on:click={() => { showNewTemplate = false;}} >Cancel</button>
<button style="margin: 5px; padding: 3px; background-color: {darkmode ? styles.DMbkgrdcolor : styles.bkgrdcolor}; color: {darkmode ? styles.DMcolor : styles.color};" on:click={setDirAsTemplate} >Set Directory</button>
</div>

{:else if showNotes}

{#if !expert}

#### Project Notes

Here is a list of all project notes. You can edit a note, delete a note, or create a note.

{/if}

<NoteList projectDir={currentProjectDir}
          editFile={runEditor}
          fig={fig}
          darkmode={darkmode}
          styles={styles}
/>

<button style="margin: 5px; padding: 3px; background-color: {darkmode ? styles.DMbkgrdcolor : styles.bkgrdcolor}; color: {darkmode ? styles.DMcolor : styles.color};" on:click={() => { showNotes = false;}} >Exit Notes</button>

{:else if showConfirm}

# Deleting Project : {currentProject}

## Are You SURE?

<div style="display: flex; flex-direction: row; margin: 10px 0px 0px 0px;">
<button style="margin: 5px; padding: 3px; background-color: {darkmode ? styles.DMbkgrdcolor : styles.bkgrdcolor}; color: {darkmode ? styles.DMcolor : styles.color};" on:click={() => { showConfirm = false; }} >No</button>
<button style="margin: 5px; padding: 3px; background-color: {darkmode ? styles.DMbkgrdcolor : styles.bkgrdcolor}; color: {darkmode ? styles.DMcolor : styles.color};" on:click={() => { showConfirm = false; if(confirmFunction !== null) confirmFunction(); }} >Yes</button>
</div>

{:else}


### Give a name for the Project: 

<input type="text" bind:value={currentProject} style="background-color: {darkmode ? styles.DMbkgrdcolor : styles.bkgrdcolor}; color: {darkmode ? styles.DMcolor : styles.color};" />

### In Directory:  

{currentProjectDir}

### Use Template

If you want to install a template, change from 'None' to the template you want to use.

<TemplateSelector 
  templates={templates} 
  template={useTemplate} 
  on:templateChange={(data) => { useTemplate = data.detail; }} 
  darkmode={darkmode} 
  styles={styles} 
/>

<div style="display: flex; flex-direction: row; margin: 10px 0px 0px 0px;">
  <button style="background-color: {darkmode ? styles.DMbkgrdcolor : styles.bkgrdcolor}; color: {darkmode ? styles.DMcolor : styles.color};" on:click={() => {showDialog = false; currentProject = '';}}>Return</button>
  <button style="background-color: {darkmode ? styles.DMbkgrdcolor : styles.bkgrdcolor}; color: {darkmode ? styles.DMcolor : styles.color};" on:click={() => {showDialog = false; console.log("Using template: " + useTemplate); runCleanUp(); }}>Create Project</button>
</div>

{/if}

</div>
